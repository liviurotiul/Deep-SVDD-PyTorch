import csv
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import OneClassSVM
from sklearn import metrics
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
import torch

def mod(x):
    if x == -1:
        return 0
    return x

test_data = torch.load('/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/src/test_data.pt').numpy()
train_data = torch.load('/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/src/train_data.pt').numpy()
test_labels = torch.load('/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/src/test_labels.pt').numpy()
train_labels = torch.load('/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/src/train_labels.pt').numpy()



# kmeans = KMeans(n_clusters=2, random_state=0).fit(train_data)
OCSVM = OneClassSVM(gamma='auto', nu=0.02).fit(train_data)
isolation_forest = IsolationForest(random_state=0).fit(train_data)
local_outliar = LocalOutlierFactor(n_neighbors=20, novelty=True).fit(train_data)

models = [OCSVM, isolation_forest, local_outliar]
names = ["ocsvm", "isolation_forest", "local_outliar"]
for model, name in zip(models, names):
    scores = None
    print("===================================================================================")
    print(name)
    predicted = model.predict(test_data)

    scores = 1-model.score_samples(test_data)
    predicted = [mod(x) for x in predicted]


    true_positive = 0
    true_negative = 0
    false_negative = 0
    false_positive = 0


    for (item1, item2) in zip(predicted, test_labels):
        if item1 == item2 == 1:
            true_positive += 1
        if item1 == item2 == 0:
            true_negative += 1
        if item1 == 1 and item2 == 0:
            false_positive += 1
        if item1 == 0 and item2 == 1:
            false_negative += 1

    print("true_positive: ", true_positive)
    print("true_negative: ", true_negative)
    print("false_positive: ", false_positive)
    print("false_negative: ", false_negative)



    # print(scores[:,1])
    # print(predicted)

    fpr, tpr, threshold = roc_curve(test_labels, scores)
    roc_auc = auc(fpr, tpr)



    # plt.title('Receiver Operating Characteristic')
    # plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
    # plt.legend(loc = 'lower right')
    # plt.plot([0, 1], [0, 1],'r--')
    # plt.xlim([0, 1])
    # plt.ylim([0, 1])
    # plt.ylabel('True Positive Rate')
    # plt.xlabel('False Positive Rate')
    # plt.show()

    nonzero_indeces = np.nonzero(test_labels)[0]
    zero_indeces = np.where(test_labels == 0)[0]

    outliars = scores[nonzero_indeces]
    normal_samples = scores[zero_indeces]
    # plt.figure(figsize=(15, 10))
    # sns.displot(scores, kind="kde")
    # sns.displot(outliars, kind="kde")
    # plt.hist(scores, color='green')
    # plt.figure(figsize=(20, 20))
    # scores
    # # plt.hist(outliars, color='blue')

    # plt.show()
    np.save("/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/results/malware/"+name+"_fpr", fpr)
    np.save("/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/results/malware/"+name+"_tpr", tpr)
    np.save("/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/results/malware/"+name+"_scores", scores)
    np.save("/home/liviu/Documents/Dev/Deep-SVDD-PyTorch/results/malware/"+name+"_outliars", outliars)
