import torch
import torch.nn as nn
import torch.nn.functional as F

from base.base_net import BaseNet

class MalwareDetectionNet(BaseNet):
#net3
    def __init__(self):
        super().__init__()
        self.hidden_dim = 24
        self.rep_dim = 6

        self.fc1 = nn.Linear(30, self.hidden_dim, bias=False)
        self.bn1 = nn.BatchNorm1d(self.hidden_dim, eps=1e-04, affine=False)
        self.fc2 = nn.Linear(self.hidden_dim, 6, bias=False)

        
    def forward(self, x):
        x = x.float()
        x.unsqueeze(-1)

        x = self.bn1(F.leaky_relu(self.fc1(x)))
        x = self.fc2(x)

        return x

class MalwareDetectionNet_Autoencoder(BaseNet):
#net3
    def __init__(self):
        super().__init__()
        self.hidden_dim = 24
        self.rep_dim = 6

        #encoder
        self.fc1 = nn.Linear(30, self.hidden_dim, bias=False)
        self.bn1 = nn.BatchNorm1d(self.hidden_dim, eps=1e-04, affine=False)
        self.fc2 = nn.Linear(self.hidden_dim, 6, bias=False)
        

        #decoder
        self.fc3_b = nn.Linear(self.hidden_dim, 30, bias=False)
        self.bn3_b = nn.BatchNorm1d(self.hidden_dim, eps=1e-04, affine=False)
        self.fc4_b = nn.Linear(6, self.hidden_dim, bias=False)

    def forward(self, x):
        x = x.float()
        x.unsqueeze(-1)

        x = self.bn1(F.leaky_relu(self.fc1(x)))
        x = self.fc2(x)

        x = self.bn3_b(F.leaky_relu(self.fc4_b(x)))
        x = self.fc3_b(x)


        return x
